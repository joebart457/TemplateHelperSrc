<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:listitems="clr-namespace:Template.Frontend.Models.ListItems"
                    xmlns:viewmodels="clr-namespace:Template.Frontend.Models.ViewModels">
    <!--Border colors-->
    <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
    <Color x:Key="BorderMediumColor">#FF888888</Color>
    <Color x:Key="BorderDarkColor">#FF444444</Color>

    <Color x:Key="PressedBorderLightColor">#FF888888</Color>
    <Color x:Key="PressedBorderDarkColor">#FF444444</Color>

    <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
    <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>

    <Color x:Key="DefaultBorderBrushLightBrush">#FFAAAAAA</Color>
    <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>

    <SolidColorBrush x:Key="HighlightColorBrush" Color="Blue"></SolidColorBrush>

    <Color x:Key="Theme.Base">#FF444444</Color>
    <Color x:Key="Theme.TitleBar">Black</Color>
    <Color x:Key="Theme.SideNav">Black</Color>
    <Color x:Key="Theme.Primary">MediumPurple</Color>
    <Color x:Key="Theme.Secondary">Purple</Color>
    <Color x:Key="Theme.Foreground">White</Color>
    <Color x:Key="Theme.Highlight">#808080</Color>
    <Color x:Key="Theme.MenuBar">#FF3F3F3F</Color>
    
    <SolidColorBrush x:Key="Brush.Clear" Color="White" Opacity="0.0"></SolidColorBrush>

    <SolidColorBrush x:Key="Brush.Theme.TitleBar" Color="{StaticResource Theme.TitleBar}"></SolidColorBrush>
    <SolidColorBrush x:Key="Brush.Theme.SideNav" Color="{StaticResource Theme.SideNav}"></SolidColorBrush>
    <SolidColorBrush x:Key="Brush.Theme.Base" Color="{StaticResource Theme.Base}"></SolidColorBrush>
    <SolidColorBrush x:Key="Brush.Theme.Primary" Color="{StaticResource Theme.Primary}"></SolidColorBrush>
    <SolidColorBrush x:Key="Brush.Theme.Secondary" Color="{StaticResource Theme.Secondary}"></SolidColorBrush>
    <SolidColorBrush x:Key="Brush.Theme.Foreground" Color="{StaticResource Theme.Foreground}"></SolidColorBrush>
    <SolidColorBrush x:Key="Brush.Theme.Highlight" Color="{StaticResource Theme.Highlight}"></SolidColorBrush>
    <SolidColorBrush x:Key="Brush.Theme.MenuBar" Color="{StaticResource Theme.MenuBar}"></SolidColorBrush>

    <!-- Button -->


    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="Button.Static.Background" Color="#FF3C7FB1"/>
    <SolidColorBrush x:Key="Button.Static.Border" Color="#FF2C628B"/>
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="DarkGray"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="LightGray"/>
    
    <SolidColorBrush x:Key="ControlTextBrushKey" Color="White"/>
    <SolidColorBrush x:Key="HighlightBrushKey" Color="#FF838383"/>

    <Style x:Key="DefaultButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        <Setter Property="Foreground" Value="{StaticResource ControlTextBrushKey}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource HighlightBrushKey}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="Nav.Button.Static.Background" Color="{StaticResource Theme.SideNav}"/>
    <SolidColorBrush x:Key="Nav.Button.Static.Border" Color="{StaticResource Theme.SideNav}"/>
    <SolidColorBrush x:Key="Nav.Button.MouseOver.Background" Color="{StaticResource Theme.Highlight}"/>
    <SolidColorBrush x:Key="Nav.Button.MouseOver.Border" Color="{StaticResource Theme.Highlight}"/>
    <SolidColorBrush x:Key="Nav.Button.Pressed.Background" Color="{StaticResource Theme.Highlight}"/>
    <SolidColorBrush x:Key="Nav.Button.Pressed.Border" Color="{StaticResource Theme.Highlight}"/>
    <SolidColorBrush x:Key="Nav.Button.Disabled.Background" Color="DarkGray"/>
    <SolidColorBrush x:Key="Nav.Button.Disabled.Border" Color="#FFADB2B5"/>
    <SolidColorBrush x:Key="Nav.Button.Disabled.Foreground" Color="LightGray"/>
    
    <Style x:Key="NavButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource Nav.Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Nav.Button.Static.Border}"/>
        <Setter Property="Foreground" Value="{StaticResource ControlTextBrushKey}"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Margin" Value="10"></Setter>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Brush.Theme.Highlight}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Nav.Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Nav.Button.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Nav.Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Nav.Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Nav.Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Nav.Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Nav.Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <SolidColorBrush x:Key="Menu.Button.Static.Background" Color="{StaticResource Theme.MenuBar}"/>
    <SolidColorBrush x:Key="Menu.Button.Static.Border" Color="{StaticResource Theme.MenuBar}"/>
    <SolidColorBrush x:Key="Menu.Button.MouseOver.Background" Color="{StaticResource Theme.Highlight}"/>
    <SolidColorBrush x:Key="Menu.Button.MouseOver.Border" Color="{StaticResource Theme.Highlight}"/>
    <SolidColorBrush x:Key="Menu.Button.Pressed.Background" Color="{StaticResource Theme.Highlight}"/>
    <SolidColorBrush x:Key="Menu.Button.Pressed.Border" Color="{StaticResource Theme.Highlight}"/>
    <SolidColorBrush x:Key="Menu.Button.Disabled.Background" Color="DarkGray"/>
    <SolidColorBrush x:Key="Menu.Button.Disabled.Border" Color="#FFADB2B5"/>
    <SolidColorBrush x:Key="Menu.Button.Disabled.Foreground" Color="LightGray"/>

    <Style x:Key="MenuButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource Menu.Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Menu.Button.Static.Border}"/>
        <Setter Property="Foreground" Value="{StaticResource ControlTextBrushKey}"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Brush.Theme.Highlight}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Menu.Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Menu.Button.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Menu.Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Menu.Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Menu.Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Menu.Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Menu.Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <SolidColorBrush x:Key="Titlebar.Button.Static.Background" Color="Red"/>
    <SolidColorBrush x:Key="Titlebar.Button.Static.Border" Color="Red"/>
    <SolidColorBrush x:Key="Titlebar.Button.MouseOver.Background" Color="PaleVioletRed"/>
    <SolidColorBrush x:Key="Titlebar.Button.MouseOver.Border" Color="Red"/>
    <SolidColorBrush x:Key="Titlebar.Button.Pressed.Background" Color="{StaticResource Theme.Highlight}"/>
    <SolidColorBrush x:Key="Titlebar.Button.Pressed.Border" Color="{StaticResource Theme.Highlight}"/>
    <SolidColorBrush x:Key="Titlebar.Button.Disabled.Background" Color="DarkGray"/>
    <SolidColorBrush x:Key="Titlebar.Button.Disabled.Border" Color="#FFADB2B5"/>
    <SolidColorBrush x:Key="Titlebar.Button.Disabled.Foreground" Color="LightGray"/>

    <Style x:Key="ExitButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource Titlebar.Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Titlebar.Button.Static.Border}"/>
        <Setter Property="Foreground" Value="{StaticResource ControlTextBrushKey}"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="20"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="10" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Brush.Theme.Highlight}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Titlebar.Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Titlebar.Button.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Titlebar.Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Titlebar.Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Titlebar.Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Titlebar.Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Titlebar.Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Treeview -->
    <DataTemplate x:Key="parameterData" 
                  DataType="{x:Type viewmodels:ParameterViewModel}">
        <Grid HorizontalAlignment="Stretch">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"></ColumnDefinition>
                <ColumnDefinition MaxWidth="20"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <TextBlock Text="{Binding Symbol}"
                       Grid.Column="0"></TextBlock>
            <Button Command="{Binding DeleteCommand}"
                    Content="-"
                    Grid.Column="1"></Button>
        </Grid>
    </DataTemplate>

    <HierarchicalDataTemplate x:Key="parameterTemplateData"
                              DataType="{x:Type viewmodels:ParameterTemplateViewModel}"
                              ItemsSource="{Binding Parameters}"
                              ItemTemplate="{StaticResource parameterData}">
        <Border CornerRadius="5" Background="{StaticResource Brush.Theme.Base}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition></ColumnDefinition>
                    <ColumnDefinition MinWidth="60" MaxWidth="60"></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <TextBlock Text="{Binding Name}"
                           Grid.Column="0"
                           HorizontalAlignment="Stretch"></TextBlock>
                <Button Command="{Binding AddParameterCommand}"
                        Grid.Column="1"
                        Content="+Row"></Button>
            </Grid>
        </Border>
    </HierarchicalDataTemplate>


    <!-- GroupBox -->

    <Style x:Key="GroupBoxPanel" TargetType="GroupBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <Border Grid.Row="0"
                                    BorderThickness="1"
                                    BorderBrush="{StaticResource Brush.Theme.TitleBar}"
                                    Background="{StaticResource Brush.Theme.TitleBar}">
                            <Label Foreground="{StaticResource Brush.Theme.Foreground}">
                                <ContentPresenter Margin="0"
                                        ContentSource="Header"
                                        RecognizesAccessKey="True" />
                            </Label>
                        </Border>

                        <Border Grid.Row="1"
                                    BorderThickness="1,0,1,1"
                                    BorderBrush="{StaticResource Brush.Theme.TitleBar}">
                            <ContentPresenter Margin="0,0" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="GroupBoxHeaderFullWidth">
        <TextBlock Text="{Binding}" 
                   Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=GroupBox}, Path=ActualWidth }"
                   Background="{StaticResource Brush.Theme.TitleBar}" Grid.Column="0" Height="20" Padding="1,0,0,0" Margin="1" Foreground="{StaticResource Brush.Theme.Foreground}"/>
    </DataTemplate>


    <!-- ListBox -->

    <Style x:Key="ProjectDisplayOnly" TargetType="{x:Type ListBoxItem}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type listitems:ProjectListItem}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition></RowDefinition>
                            <RowDefinition></RowDefinition>
                        </Grid.RowDefinitions>
                        <TextBlock Text="{Binding Name}" Grid.Row="0">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="#1FFF0000"></Setter>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <Grid Grid.Row="1">
                            <Grid.RowDefinitions>
                                <RowDefinition></RowDefinition>
                                <RowDefinition></RowDefinition>
                                <RowDefinition></RowDefinition>
                            </Grid.RowDefinitions>
                            <TextBlock Grid.Row="0" Text="{Binding InputDirectory}" FontStyle="Italic" FontSize="10"></TextBlock>
                            <TextBlock Grid.Row="1" Text="{Binding SandboxDirectory}" FontStyle="Italic" FontSize="10"></TextBlock>
                            <TextBlock Grid.Row="2" Text="{Binding SqlDirectory}" FontStyle="Italic" FontSize="10"></TextBlock>
                        </Grid>
                        
                    </Grid>
                    
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EditableProject" TargetType="{x:Type ListBoxItem}">
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type viewmodels:ProjectViewModel}">
                    <Border CornerRadius="5" Background="White" Width="800">
                        <Expander>
                            <Expander.Header>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="740"></ColumnDefinition>
                                        <ColumnDefinition Width="40"></ColumnDefinition>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Text="{Binding Name}"
                                               Margin="10,0,0,0"
                                               Grid.Column="0"></TextBlock>
                                    <Button Grid.Column="1"
                                            Command="{Binding ShowMoreActionsCommand}"
                                            Margin="10,0,10,0"
                                            BorderThickness="0" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
                                            CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
                                        <Image Source="pack://application:,,,/Assets/Images/three-dots.png"></Image>
                                    </Button>

                                </Grid>
                            </Expander.Header>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition></RowDefinition>
                                    <RowDefinition></RowDefinition>
                                    <RowDefinition></RowDefinition>
                                </Grid.RowDefinitions>
                                <TextBlock Grid.Row="0" Text="{Binding InputDirectory}" FontStyle="Italic" FontSize="10"></TextBlock>
                                <TextBlock Grid.Row="1" Text="{Binding SandboxDirectory}" FontStyle="Italic" FontSize="10"></TextBlock>
                                <Grid Grid.Row="2">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="80"></ColumnDefinition>
                                        <ColumnDefinition></ColumnDefinition>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" Text="Dependencies:" FontSize="10"></TextBlock>
                                    <TextBlock Grid.Column="1" Text="{Binding Dependencies}" FontStyle="Italic" FontSize="10" TextWrapping="Wrap"></TextBlock>
                                </Grid>
                            </Grid>
                        </Expander>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EditableParameter" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Margin" Value="5"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type viewmodels:ParameterViewModel}">
                    <Border CornerRadius="5" Background="{StaticResource Brush.Theme.Foreground}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="40"></ColumnDefinition>
                                <ColumnDefinition Width="600"></ColumnDefinition>
                                <ColumnDefinition Width="0"></ColumnDefinition>
                                <ColumnDefinition Width="40"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <Button Grid.Column="0"
                                    Margin="10,0,10,0"
                                    ToolTip="{Binding TypeImageTooltip}"
                                    BorderThickness="0" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
                                <Border CornerRadius="5">
                                    <Image Source="{Binding TypeImageSource}"></Image>
                                </Border>
                            </Button>
                            <Grid Grid.Column="1">
                                <Grid.RowDefinitions>
                                    <RowDefinition></RowDefinition>
                                    <RowDefinition></RowDefinition>
                                </Grid.RowDefinitions>
                                <TextBlock Grid.Row="0"
                                           Text="{Binding Symbol}"></TextBlock>
                                <TextBlock Grid.Row="1"
                                           Text="{Binding Description}"
                                           FontStyle="Italic"></TextBlock>
                            </Grid>
                            <Button Grid.Column="3"
                                    Command="{Binding ShowMoreActionsCommand}"
                                    Margin="10,0,10,0"
                                    BorderThickness="0" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
                                    CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
                                <Image Source="pack://application:,,,/Assets/Images/three-dots.png"></Image>
                            </Button>

                        </Grid>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ExpandableParameterTemplate" TargetType="{x:Type ListBoxItem}">
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
        <Setter Property="Margin" Value="10"></Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type viewmodels:ParameterTemplateViewModel}">
                    <Border CornerRadius="10" Background="White" Width="800">
                        <Expander Header="{Binding Name}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition></RowDefinition>
                                    <RowDefinition></RowDefinition>
                                    <RowDefinition></RowDefinition>
                                </Grid.RowDefinitions>
                                <GroupBox Header="Parameters" Margin="10"
                                          Grid.Row="0"
                                          Grid.RowSpan="2">
                                    <ListBox x:Name="lbParams" 
                                         MaxHeight="200"
                                         ItemContainerStyle="{StaticResource EditableParameter}"
                                         ItemsSource="{Binding Parameters}">
                                        <ListBox.Style>
                                            <Style TargetType="{x:Type ListBox}">
                                                <Setter Property="Background" Value="LightGray"/>
                                            </Style>
                                        </ListBox.Style>
                                    </ListBox>
                                </GroupBox>
                                <Grid Grid.Row="2" Margin="10">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition></ColumnDefinition>
                                        <ColumnDefinition Width="80"></ColumnDefinition>
                                        <ColumnDefinition Width="40"></ColumnDefinition>
                                    </Grid.ColumnDefinitions>
                                    <Button Grid.Column="1"
                                        Content="+ Parameter"
                                        Style="{StaticResource DefaultButtonStyle}"
                                        Command="{Binding AddParameterCommand}"></Button>
                                </Grid>
                            </Grid>
                        </Expander>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ParameterTemplateDisplayOnly" TargetType="{x:Type ListBoxItem}">
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
        <Setter Property="Margin" Value="10"></Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type listitems:ParameterTemplateListItem}">
                    <Border CornerRadius="10" Background="White" Width="300">
                        <Label Content="{Binding Name}" Margin="10,0,0,0"/>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Inline Textbox -->

    <Style x:Key="TextBoxSingleBorder" TargetType="TextBox">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="150"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="Background" Value="{StaticResource Brush.Clear}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Theme.Primary}"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderThickness" Value="0 0 0 2"/>
    </Style>

    <Style x:Key="TextBoxSingleBorderWithLabel" TargetType="TextBox">
        <Setter Property="Height" Value="50"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="Background" Value="{StaticResource Brush.Clear}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Theme.Primary}"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderThickness" Value="0 0 0 2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="20"></RowDefinition>
                            <RowDefinition Height="25"></RowDefinition>
                        </Grid.RowDefinitions>
                        <Label Grid.Row="0" 
                               Content="{TemplateBinding Tag}" 
                               Foreground="{StaticResource Brush.Theme.Primary}"
                               Margin="0,0,0,-5"></Label>
                        <Border x:Name="border" Grid.Row="1"
                                    BorderBrush="{TemplateBinding BorderBrush}"     
                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                    Background="{TemplateBinding Background}" 
                                    SnapsToDevicePixels="True"
                                    Width="{TemplateBinding Width}"
                                    Margin="10,0,0,0"
                                    IsEnabled="{TemplateBinding IsEnabled}">
                                <ScrollViewer x:Name="PART_ContentHost" Focusable="false"
                                              HorizontalScrollBarVisibility="Hidden" 
                                              VerticalScrollBarVisibility="Hidden"/>
                            </Border>
                    </Grid>
                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="Gray"/>
                <Setter Property="Foreground" Value="Gray"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource Brush.Theme.Primary}"/>
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TextboxInlineSingleBorder" TargetType="TextBox">
        <Setter Property="Height" Value="35"/>
        <Setter Property="Width" Value="150"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="Background" Value="{StaticResource Brush.Clear}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Clear}"/>
        <Setter Property="Foreground" Value="{StaticResource Brush.Theme.Foreground}"/>
        <Setter Property="BorderThickness" Value="0 0 0 2"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="MoveInlineLabel">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.Target="{Binding ElementName=textBlock}">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="-6.667">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <QuinticEase EasingMode="EaseInOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.Target="{Binding ElementName=textBlock}">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="-18.733">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <QuinticEase EasingMode="EaseInOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="textBlock">
                                <EasingColorKeyFrame KeyTime="0:0:0.6" Value="#FF0285BA"/>
                            </ColorAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.FontWeight)" Storyboard.TargetName="textBlock">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.3">
                                    <DiscreteObjectKeyFrame.Value>
                                        <FontWeight>Bold</FontWeight>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Grid>
                        <Border x:Name="border" Grid.Row="1"
                                    BorderBrush="{TemplateBinding BorderBrush}"     
                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                    Background="{TemplateBinding Background}" 
                                    SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false"
                                              Margin="0,10,0,0"
                                      HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>

                        <TextBlock x:Name="textBlock" Text="{TemplateBinding Tag}"
                                   VerticalAlignment="Center" Margin="4,0,0,-5"
                                   Foreground="Gray" RenderTransformOrigin="0.5,0.5">
                            <TextBlock.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </TextBlock.RenderTransform>
                        </TextBlock>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="Yellow"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding BorderBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="Yellow"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource MoveInlineLabel}" />
                            </Trigger.EnterActions>
                            <!--
                            <Trigger.ExitActions>
                                // In case you wanted to do something cool on exit too..
                            </Trigger.ExitActions>
                            -->
                        </Trigger>
                        <EventTrigger RoutedEvent="TextBox.TextChanged">
                            <BeginStoryboard Storyboard="{StaticResource MoveInlineLabel}" />
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- ComboBox (Overrides default) -->

    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border
                  x:Name="Border" 
                  Grid.ColumnSpan="2"
                  CornerRadius="0"
                  Background="#FF3F3F3F"
                  BorderBrush="#FF97A0A5"
                  BorderThickness="1" />
            <Border 
                  Grid.Column="0"
                  CornerRadius="0" 
                  Margin="1" 
                  Background="#FF3F3F3F" 
                  BorderBrush="#FF97A0A5"
                  BorderThickness="0,0,1,0" />
            <Path 
                  x:Name="Arrow"
                  Grid.Column="1"     
                  Fill="White"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#808080" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#E0E0E0" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="#EEEEEE" />
                <Setter TargetName="Border" Property="BorderBrush" Value="#AAAAAA" />
                <Setter Property="Foreground" Value="#888888"/>
                <Setter TargetName="Arrow" Property="Fill" Value="#888888" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>

    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton 
                            Name="ToggleButton" 
                            Template="{StaticResource ComboBoxToggleButton}" 
                            Grid.Column="2" 
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="3,3,23,3"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                            Style="{x:Null}" 
                            Template="{StaticResource ComboBoxTextBox}" 
                            HorizontalAlignment="Left" 
                            VerticalAlignment="Center" 
                            Margin="3,3,23,3"
                            Focusable="True" 
                            Background="#FF3F3F3F"
                            Foreground="White"
                            Visibility="Hidden"
                            IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True" 
                            Focusable="False"
                            PopupAnimation="Slide">

                            <Grid Name="DropDown"
                              SnapsToDevicePixels="True"                
                              MinWidth="{TemplateBinding ActualWidth}"
                              MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                x:Name="DropDownBorder"
                                Background="#FF3F3F3F"

                                BorderThickness="1"
                                BorderBrush="#888888"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable"  Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <!-- SimpleStyles: ComboBoxItem -->
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border"
                              Padding="2"
                              SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="#FF4F4F4F"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Checkbox -->

    <Style x:Key="CheckboxTextAlignLeft" TargetType="CheckBox">
        <Style.Resources>
            <Style TargetType="Path">
                <Setter Property="FlowDirection" Value="LeftToRight" />
            </Style>
            <Style TargetType="TextBlock">
                <Setter Property="FlowDirection" Value="LeftToRight" />
            </Style>
        </Style.Resources>

        <Setter Property="FlowDirection" Value="RightToLeft" />
    </Style>

</ResourceDictionary>